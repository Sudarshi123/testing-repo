# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13beZZvTOqHkLB6R1C5XhrmjMKeqQWWVe
"""

#Q1
import numpy as np

#Q2
print(np.__version__)
print(np.show_config())

#Q3
ar1 = np.zeros(5)
print(ar1)

#Q4
ar2 = np.eye(10)
print(ar2)
print(ar2.shape)

#Q5
ar3 = np.arange(256)
print(ar3)

#Q6
ar4 = np.arange(10)
print(ar4)
ar5 = ar4[::-1]
print(ar5)

#Q7
ar6 = np.random.uniform(low=0, high=10, size=(5,5))
print(ar6)

#Q8
ar7 = np.array([19, 12, 0, -5, 0, 4, -6])
print(ar7)

#Q8(a)
index1 = np.where(ar7 == -5)
print("The index value for -5 is ", index1)

#Q8(b)
index2 = np.where(ar7 != 0)
print("The indices of non-zero values are", index2)

#Q8(c)
maxval1 = np.max(ar7)
minval1 = np.min(ar7)
print("The maximum value of the array is", maxval1)
print("The minimum value of the array is", minval1)

#Q9
ar8 = np.ones((8,8))
ar8[1:-1, 1:-1] = 0
print(ar8)

#Q10
ar9 = np.array([[12, 4, 6, 0, 55, 6], [19, 7, 0, 1, 8, 0], [99, 12, 3, 4, 2, 32], [6, 1, 23, 0, 45, 54], [78, 0, 156, 124, 7, 73], [0, 41, 0, 7, 6, 21]])
print("Original matrix is \n", ar9)

#Q10(a)
#To normalize a matrix means to scale the values such that that the range of the row or column values is between 0 and 1

#Q10(b)
# redundancy of database or data duplication can be resolved.  
# Minimize/avoid data modification problems.  
# database can be expanded without affecting existing data. 
# simplifies the query.

#Q10(c)
norm = np.linalg.norm(ar9)
ar10 = ar9/norm
print("Normalized matrix is \n", ar10)

#Q10(d)
ar11 = ar10.reshape(4, 9)
print( ar11)

#Q11(a)
print( np.array(0) / np.array(0))

#Q11(b)
print( np.array(0) // np.array(0))

#Q11(c)
# / - a float result
#// - the nearest integer value

#Q12
import datetime 
today = datetime.date.today()
day_before_yesterday = today - datetime.timedelta(days = 2)
yesterday = today - datetime.timedelta(days = 1) 
tomorrow = today + datetime.timedelta(days = 1)
day_after_tomorrow = today + datetime.timedelta(days = 2)
print('Day before Yesterday : ', day_before_yesterday)
print('Yesterday : ', yesterday)
print('Today : ', today)
print('Tomorrow : ', tomorrow)
print('Day after Tomorrow : ', day_after_tomorrow)

#Q13
ar11 = np.random.uniform(51, size=(15))
print(ar11)
ar12 = np.sort(ar11)
print(ar12)

#Q14
P = np.random.random()
Q = np.random.random()
print(P)
print(Q)
if P == Q:
  print("P and Q arrays are eqal")
else:
  print("P and Q arrays are not eqal")

while True:
  # input 
  print("Select the currency you want to convert to to Sri Lankan Rupees (SLR) :")
  print("USD. United States Dollar (USD)")
  print("EUR. Euro (EUR)")
  print("GBP. Pound sterling (GBP)")
  choice = input("Enter your choice(USD/EUR/GBP): 
                 

# options
  if choice in ('USD', 'EUR', 'GBP'):
  
    if choice == 'USD':
     usd = float(input ("Enter amount of United States Dollars (USD) you want to convert to Sri Lankan Rupees (SLR): "))
     usd_to_slr = 359.62
     slr = usd * usd_to_slr
     print("$ %.2f = Rs. %.2f" % (usd, slr))
    
    elif choice == 'EUR':
      eur = float(input ("Enter amount of Euros (EUR) you want to convert to Sri Lankan Rupees (SLR): "))
      eur_to_slr = 367.98
      slr = eur * eur_to_slr
      print("€ %.2f = Rs. %.2f" % (eur, slr))
      
    elif choice == 'GBP':
      gbp = float(input ("Enter amount of Pounds sterling (GBP) you want to convert to Sri Lankan Rupees (SLR): "))
      gbp_to_slr = 431.28
      slr = gbp * gbp_to_slr
      print("£ %.2f = Rs. %.2f" % (gbp, slr))


  next_calculation = input("Do you want to convert more currencies to Sri Lankan Rupees (SLR)? (yes/no): ")
  if next_calculation == "no":
    print("Thank You")
  break
    
else:
  print("Invalid Input")
